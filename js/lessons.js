'use strict';
// alert('hello');

// const result = confirm("ТЫ петух?");

// const answer = prompt("Вам есть что расчехлить по водному??", "");

// console.log(answer);

// console.log(result);
// console.log(typeof(answer)); 

// const answers = [];    // пустой массив

// answers[0] = prompt('Как ваше ничегО??', '');
// answers[1] = prompt('Не подахуели ли??', '');
// answers[2] = prompt('Может быть чаю с малинавым варением??', '');

// document.write(answers); хуета старая

// console.log(typeof(answers)); // объект !! 

// Вся информация, которую мы получаем от пользователя, приходит к нам в виде строки, независимо от того как именно мы ее получили!!!!!!!!!!!!!!!!!!!!!!


// ИНТЕРПОЛЯЦИЯ - внедряем значение переменной прямо внутри строки!! с помощью бэктиков (``)

// const category = 'toys';

// console.log('https://someurl.com/' + category); // Старый способ с использованием конкатенации использовался в старых стандартах

// console.log(`https://someurl.com/${category}/5`); // Та самая интерполяция!! Динамически подставляем нужную переменную прямо в строку 

// const user = "Ivan";

// alert(`Привет ${user}`); // Еще один пример

// УСЛОВИЯ

// if (1){  // Условие превращает любой тип данный в Boolean
//   console.log('Ok');
// } else {
//   console.log('Error')
// }

// const num = 50;

// // if (num < 49){
// //   console.log('Error');
// // } else if (num > 100) {
// //   console.log('toomuch');
// // } else {
// //   console.log('Ok');
// // }

// switch (num) {  // Конструкция switch всегда работает со строгим сравнением! ! !
//   case 49:
//     console.log('Неверно');
//     break;  // Обязательная синтаксическая конструкция
//   case 100:
//     console.log('Неверно');
//     break;
//   case 51:
//     console.log('В точку');
//     break;   
//   default: // Условие при котором ни один case не будет верным
//     console.log('Не в этот раз');
//     break;            
// }

// ЦИКЛЫ

// let num = 50;

// while (num <= 55) {  // Цикл while 
//   console.log(num);
//   num++;
// }

// do {
//   console.log(num);
//   num++;
// } while (num <= 55);

// for (let i = 1; i < 8; i++) { // 1 Сощздается переменная i со значением 1 ; 2 Цикл будет выполнятся пока i будет меньше 8; 3 с каждым шагом цикла i будет увеличиваться на 1;
//   console.log(num);
//   num++;
// }

// for (let i = 1; i < 10; i++) { // 1 Сощздается переменная i со значением 1 ; 2 Цикл будет выполнятся пока i будет меньше 8; 3 с каждым шагом цикла i будет увеличиваться на 1;
//   if (i === 6) {
//     // break;   // Прерывание цикла 
//     continue;   // Позволяет нам пропустить шаг цикла который нам не нужен, но не прерывает его ход
//   }
//   console.log(i);
// }

// ФУНКЦИИ

// function showFirstMessage(text) { // Негласное правило - имя функци задается в виде глагола
//     console.log(text);
//     let num = 20; // Переменная объявленная внутри функции недоступна вне ее (локальаня переменная)
// // Но в свою очередь внутри функции может быть использована глобальная переменная, заданная внее ее
// // Так же есть возможность создавать копию глобальной переменной локально внутри функции
// // они никак не будут пересекаться
// }

// showFirstMessage('Hello World'); // Вызов функции с указанием значения аргумента
// console.log(num);  // num is not defined

// function calc(a, b) {
//     return (a + b); // Окончание функции а так же возвращение значения наружу
//     // console.log('sometext'); // Код недоступен в функции после return
// }

// console.log(calc(4, 5));
// console.log(calc(12313, 1));
// console.log(calc(10, 5));

function ret() {
    let num = 50;
    return num; // В данном случае мы вытаскиваем локальную переменную наружу и можем использовать ее глобально при выхове функции
}

const anotherNum = ret(); // Создаем ппеременную и в качестве значения присваиваем ей функцию которая возвращает нам переменную

console.log(anotherNum);

const logger = function() { // так называемый Funtion expression, когда функция объявляется внутри переменной
    console.log("Hello");
}; // Тут обязательно точка запятой в отличнии от обычного объявления функции

logger(); // вызов functuion Expression, можно вызвать только после объявления

// СТРЕЛОЧНЫЕ ФУНКЦИИ (ES6+)

const calc = (a, b) => a + b; // Объявление стрелочной функции внури переменной calc (сокращенный вариант если тело функции умещается в одну стрчоку)
// (a, b) являются аргументами функции , а то что идет после => ее тело 
// Не сокращенная версия записи - const calc = (a, b) => { return a + b }; 
// Особенностю стрелочных функций является то что они не имеют своего контекста this

// МЕТОДЫ И СВОЙСТВА СТРОК И ЧИСЕЛ

// МЕТОДЫ - Вспомогательные функции 
// СВОЙСТВА - Вспомогательные значения

const str = "teSt", // У строк есть только одно свойство - length
      arr = [1, 2, 4]; // Массив

console.log(str.length); // Метод length указывает длину сьтроки, в данном случае она равна 4 (4 буквы)
console.log(arr.length); // Метод length так же указывает и длину массива в данном случае она равна 3 (3 элемента)
console.log(str[2]); // Получаем символ из строки по индексу


console.log(str.toUpperCase()); // Метод строки который изменяет регистр символом в данном случае делает их заглавными
console.log(str.toLowerCase()); // обратный метод меняет буквы на прописные
// оба этих метода не меняют значение переменной со строкой, они выдают нам новое значение

let fruit = 'Some fruit';

console.log(fruit.indexOf('fruit')); // Отдает нам точку начала отсчета куска строки в заданной строке
// так назхываемый - поиск ПОдстроки


// МЕТОД slice
const logg = 'Hello World';

console.log(logg.slice(6, 11)); // Отрезает часть строки и выдает нам вырезанное значение
// (начало отрезка - включительно, конец отрезка - не включительно) 
// Если второй аргумент не указан, строка вырезается от указанного индекса и до конца строки
// Аргументы могут быть отрицательными и в таком случае отсчет будет идти справа налево

// МЕТОД substring
console.log(logg.substring(11, 6)); // Идентичный методу slice, только не принимает отрицательные аргументы
//  А так же позволяет первому элементу быть больше второго и в таком случае отрезок будет идти справа налево
// По аналогии с отрицательыными числами в slice()

// МЕТОД substr
console.log(logg.substr(6, 5)); // Второй аргумент тут указывает длину вырезаемой строки

// МЕТОДЫ ЧИСЕЛ

// МИНИБИБЛИОТЕКА МЕТОДОВ ЧИСЕЛ В JAVASCRIPT - Math

const num = 12.2;
console.log(Math.round(num)); // Метод для округления чисел до ближайшего целого

const test = "12.2px";
console.log(parseInt(test)); // Преобразует строку в целое число (12)
console.log(parseFloat(test)); // Преобразует строку в число сохраняя десятичную запятую если она есть (12.2)

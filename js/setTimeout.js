// Вариант с указанием анонимной функции в качестве аргумента у setTimeOut()

// const timerId = setTimeout(function(text) { // Значением у переменной будет метод setTimeout()
//     // С анонимной функцией в качестве аргумента
//     console.log(text); 
// }, 2000, 'Hello'); // вторым аргументом у этого метода является задержка в данном случае 2 секунды
// Третий аргумент у данного метода передается в качестве аргумента в функцию которую он в себя принимает

// Вариант с указанием уже ОБЪЯВЛЕННОЙ функции в качестве аргумента у setTimeout()

// btn.addEventListener('click', () => {
//     // const timerId = setTimeout(logger, 2000, 'Hello');
//     timerId = setInterval(logger, 500, 'Hello');
//     // После клика на btn каждые две секунды будет срабатывать функция logger

// });

// Анимация с помощью setInterval

const btn = document.querySelector('.btn'); // Получаем элемент со страницы
let timerId; 

function myAnimation() { // Создаем функцию анимации
    const elem = document.querySelector('.box'); // Получаем элемент который будем анимировать
    let pos = 0; // Начальная позиция элемента

    const id = setInterval(frame, 10); // СОздааем переменную с интервалом и функцией frame в качестве аргумента

    function frame() { // Функция frame
        if (pos == 300) { // Если позиция будет равна 300
            clearInterval(id); // Останавливаем интервал
        } else { // в другом случае
            pos++; // Увеличиваем позицию на 1
            elem.style.top = pos + 'px'; // Меняем положение сверху на значение pos 
            elem.style.left = pos + 'px'; // Меняем положение слева на значение pos 
        }
    }
}

btn.addEventListener('click', myAnimation); // Вешаем обработчик событий на кнопку полученную вначале, при клике на нее будет запускаться 
// функция myAnimation



// const timerId = setTimeout(logger, 2000, 'Hello');
// setTimeout() необязательно вставлять в переменную, это нужно для того чтобы
// использовать такие переменные с разными задержками в нужное время
// А так же для того чтобы сбрасывать таймер при надобности ниже будет пример
// В данном случае в качестве аргумента у данного метода выступает уже объявленная функция

// clearInterval(timerId);
// Сбрасывваем таймер

// function logger(text) {
//     if (i === 3) {
//         clearInterval(timerId);
//     }
//     console.log(text);
//     i++;

// }

// Проблема setInterval в том что если функция которая в него задана выполняеся дольше чем указаннный интервал времени \
// ТО он не будет послее ее выполнения выжидать этьот интервал а запустит функцию сразу
// Чтобы этогно избежать можно использовать рекурсию для метода setTimeout, пример ниже

// let id = setTimeout(function log() {
//     console.log('hello');
//     id = setTimeout(log, 500); // Вызываем метод внутри его самого это и называется рекурсией
// }, 500);



